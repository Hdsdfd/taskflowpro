# Generated by Django 5.2.1 on 2025-09-03 07:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        (
            "projects",
            "0002_project_actual_cost_project_budget_project_end_date_and_more",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ServiceConnection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "connection_name",
                    models.CharField(max_length=100, verbose_name="连接名称"),
                ),
                ("config", models.JSONField(verbose_name="连接配置")),
                ("credentials", models.JSONField(verbose_name="认证凭据")),
                (
                    "credentials_encrypted",
                    models.BooleanField(default=True, verbose_name="凭据已加密"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "活跃"),
                            ("inactive", "非活跃"),
                            ("error", "错误"),
                            ("testing", "测试中"),
                        ],
                        default="inactive",
                        max_length=20,
                        verbose_name="连接状态",
                    ),
                ),
                (
                    "last_sync_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后同步时间"
                    ),
                ),
                (
                    "last_error_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后错误时间"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="错误信息"),
                ),
                (
                    "auto_sync",
                    models.BooleanField(default=False, verbose_name="自动同步"),
                ),
                (
                    "sync_interval_minutes",
                    models.IntegerField(default=60, verbose_name="同步间隔(分钟)"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "can_edit",
                    models.ManyToManyField(
                        blank=True,
                        related_name="editable_connections",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="可编辑用户",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_connections",
                        to="projects.project",
                        verbose_name="关联项目",
                    ),
                ),
            ],
            options={
                "verbose_name": "服务连接",
                "verbose_name_plural": "服务连接",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GitRepository",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="仓库名称")),
                (
                    "repo_type",
                    models.CharField(
                        choices=[
                            ("github", "GitHub"),
                            ("gitlab", "GitLab"),
                            ("bitbucket", "Bitbucket"),
                            ("gitee", "Gitee"),
                            ("other", "其他"),
                        ],
                        max_length=20,
                        verbose_name="仓库类型",
                    ),
                ),
                ("repo_url", models.URLField(verbose_name="仓库地址")),
                (
                    "default_branch",
                    models.CharField(
                        default="main", max_length=100, verbose_name="默认分支"
                    ),
                ),
                (
                    "protected_branches",
                    models.JSONField(default=list, verbose_name="受保护分支"),
                ),
                (
                    "auto_sync_commits",
                    models.BooleanField(default=True, verbose_name="自动同步提交"),
                ),
                (
                    "auto_sync_issues",
                    models.BooleanField(default=True, verbose_name="自动同步问题"),
                ),
                (
                    "auto_sync_pull_requests",
                    models.BooleanField(default=True, verbose_name="自动同步拉取请求"),
                ),
                (
                    "total_commits",
                    models.IntegerField(default=0, verbose_name="总提交数"),
                ),
                (
                    "total_issues",
                    models.IntegerField(default=0, verbose_name="总问题数"),
                ),
                (
                    "total_pull_requests",
                    models.IntegerField(default=0, verbose_name="总拉取请求数"),
                ),
                (
                    "last_sync_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后同步时间"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否激活"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "project",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="git_repository",
                        to="projects.project",
                        verbose_name="关联项目",
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="git_repositories",
                        to="integrations.serviceconnection",
                        verbose_name="服务连接",
                    ),
                ),
            ],
            options={
                "verbose_name": "Git仓库",
                "verbose_name_plural": "Git仓库",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DataSync",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="同步名称")),
                (
                    "sync_type",
                    models.CharField(
                        choices=[
                            ("import", "导入"),
                            ("export", "导出"),
                            ("bidirectional", "双向"),
                        ],
                        max_length=20,
                        verbose_name="同步类型",
                    ),
                ),
                ("data_mapping", models.JSONField(verbose_name="数据映射")),
                (
                    "sync_schedule",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="同步计划"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "等待中"),
                            ("in_progress", "进行中"),
                            ("completed", "已完成"),
                            ("failed", "失败"),
                            ("cancelled", "已取消"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="同步状态",
                    ),
                ),
                (
                    "progress",
                    models.IntegerField(default=0, verbose_name="同步进度(%)"),
                ),
                (
                    "total_items",
                    models.IntegerField(default=0, verbose_name="总项目数"),
                ),
                (
                    "synced_items",
                    models.IntegerField(default=0, verbose_name="已同步项目数"),
                ),
                (
                    "failed_items",
                    models.IntegerField(default=0, verbose_name="失败项目数"),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="开始时间"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="完成时间"
                    ),
                ),
                (
                    "last_sync_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后同步时间"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="错误信息"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
                (
                    "source_connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="source_syncs",
                        to="integrations.serviceconnection",
                        verbose_name="源连接",
                    ),
                ),
                (
                    "target_connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="target_syncs",
                        to="integrations.serviceconnection",
                        verbose_name="目标连接",
                    ),
                ),
            ],
            options={
                "verbose_name": "数据同步",
                "verbose_name_plural": "数据同步",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ThirdPartyService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="服务名称")),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("git", "Git仓库"),
                            ("cloud_storage", "云存储"),
                            ("communication", "通讯工具"),
                            ("design", "设计工具"),
                            ("testing", "测试工具"),
                            ("monitoring", "监控工具"),
                            ("other", "其他"),
                        ],
                        max_length=30,
                        verbose_name="服务类型",
                    ),
                ),
                ("description", models.TextField(blank=True, verbose_name="服务描述")),
                ("base_url", models.URLField(verbose_name="服务地址")),
                (
                    "api_version",
                    models.CharField(blank=True, max_length=20, verbose_name="API版本"),
                ),
                (
                    "documentation_url",
                    models.URLField(blank=True, verbose_name="文档地址"),
                ),
                (
                    "auth_type",
                    models.CharField(
                        choices=[
                            ("api_key", "API密钥"),
                            ("oauth2", "OAuth 2.0"),
                            ("basic", "基本认证"),
                            ("token", "访问令牌"),
                            ("none", "无需认证"),
                        ],
                        default="api_key",
                        max_length=20,
                        verbose_name="认证类型",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否启用"),
                ),
                (
                    "is_public",
                    models.BooleanField(default=False, verbose_name="是否公开"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
            ],
            options={
                "verbose_name": "第三方服务",
                "verbose_name_plural": "第三方服务",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="serviceconnection",
            name="service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="connections",
                to="integrations.thirdpartyservice",
                verbose_name="第三方服务",
            ),
        ),
        migrations.CreateModel(
            name="Webhook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Webhook名称")),
                (
                    "webhook_type",
                    models.CharField(
                        choices=[
                            ("github", "GitHub"),
                            ("gitlab", "GitLab"),
                            ("slack", "Slack"),
                            ("discord", "Discord"),
                            ("teams", "Microsoft Teams"),
                            ("dingtalk", "钉钉"),
                            ("feishu", "飞书"),
                            ("custom", "自定义"),
                        ],
                        max_length=20,
                        verbose_name="Webhook类型",
                    ),
                ),
                ("url", models.URLField(verbose_name="Webhook地址")),
                ("events", models.JSONField(default=list, verbose_name="触发事件")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否启用"),
                ),
                (
                    "secret_token",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="密钥令牌"
                    ),
                ),
                (
                    "verify_ssl",
                    models.BooleanField(default=True, verbose_name="验证SSL"),
                ),
                (
                    "total_requests",
                    models.IntegerField(default=0, verbose_name="总请求数"),
                ),
                (
                    "successful_requests",
                    models.IntegerField(default=0, verbose_name="成功请求数"),
                ),
                (
                    "failed_requests",
                    models.IntegerField(default=0, verbose_name="失败请求数"),
                ),
                (
                    "last_triggered_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后触发时间"
                    ),
                ),
                (
                    "last_error_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后错误时间"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="错误信息"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="webhooks",
                        to="projects.project",
                        verbose_name="关联项目",
                    ),
                ),
                (
                    "service_connection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="webhooks",
                        to="integrations.serviceconnection",
                        verbose_name="服务连接",
                    ),
                ),
            ],
            options={
                "verbose_name": "Webhook",
                "verbose_name_plural": "Webhook",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AlterUniqueTogether(
            name="serviceconnection",
            unique_together={("service", "project", "connection_name")},
        ),
    ]
